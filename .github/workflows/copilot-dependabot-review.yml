name: Dependabot â†’ Facts + Copilot

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  facts:
    if: github.event.pull_request.user.login == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - id: meta
        uses: dependabot/fetch-metadata@v2

      - uses: actions/checkout@v4

      - name: Import counts
        id: usage
        env:
          PKGS: ${{ steps.meta.outputs.dependency-names }}
        run: |
          set -euo pipefail
          FILES=( ':(glob)**/*.ts' ':(glob)**/*.tsx' ':(glob)**/*.js' ':(glob)**/*.jsx' ':(glob)**/*.mjs' ':(glob)**/*.cjs'
                  ':!node_modules/**' ':!.next/**' ':!dist/**' ':!build/**' ':!coverage/**' ':!.turbo/**' )
          esc() { printf '%s' "$1" | sed -E 's/[][(){}.^$|*+?\\]/\\&/g'; }

          # Get project name from package.json or default to "blog"
          project_name="$(jq -r '.name // "blog"' package.json 2>/dev/null || echo "blog")"

          out=""
          IFS=',' read -ra arr <<< "${PKGS}"
          for raw in "${arr[@]}"; do
            pkg="$(echo "$raw" | xargs)"; [ -z "$pkg" ] && continue
            e="$(esc "$pkg")"
            p1="from[[:space:]]+['\"]${e}(/[^\"]*)?['\"]"
            p2="^[[:space:]]*import[[:space:]]+['\"]${e}(/[^\"]*)?['\"]"
            p3="require\\([[:space:]]*['\"]${e}(/[^\"]*)?['\"]\\)"
            p4="import\\([[:space:]]*['\"]${e}(/[^\"]*)?['\"]\\)"
            matches="$(git grep -n -I -E "${p1}|${p2}|${p3}|${p4}" -- "${FILES[@]}" || true)"
            files="$(printf "%s" "$matches" | cut -d: -f1 | sort -u | wc -l | tr -d ' ')"
            hits="$(printf "%s" "$matches" | wc -l | tr -d ' ')"
            
            if [ "$files" -gt 0 ]; then
              out+="- \`${pkg}\`: **${files} files**, **${hits} imports** (in \`${project_name}\`)"$'\n'
            else
              out+="- \`${pkg}\`: **0 files**, **0 imports**"$'\n'
            fi
          done
          echo "lines<<EOF" >> $GITHUB_OUTPUT
          printf "%s" "$out" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "nonce=$(date -u +%s)" >> $GITHUB_OUTPUT

      - name: Inject facts into PR description
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const { data: pr } = await github.rest.pulls.get({ ...context.repo, pull_number: prNumber });
            const block = [
              '<!-- deps-facts:begin -->',
              '### ðŸ§ª Dependabot Facts',
              `- Packages: \`${{ steps.meta.outputs['dependency-names'] }}\``,
              `- Update type: \`${{ steps.meta.outputs['update-type'] }}\``,
              `- Dependency type: \`${{ steps.meta.outputs['dependency-type'] }}\``,
              `- Directory: \`${{ steps.meta.outputs.directory }}\``,
              '- **Import usage**',
              process.env.LINES || '- n/a',
              '<!-- deps-facts:end -->'
            ].join('\n');

            const body = pr.body || '';
            const cleaned = body.replace(/<!-- deps-facts:begin -->[\s\S]*?<!-- deps-facts:end -->/m, '').trim();
            const newBody = `${cleaned}\n\n${block}`.trim();

            await github.rest.pulls.update({ ...context.repo, pull_number: prNumber, body: newBody });
        env:
          LINES: ${{ steps.usage.outputs.lines }}

      - name: Nudge Copilot (tiny ping so it re-evaluates)
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸ”Ž Facts injected into PR description. Copilot, generate the Dependabot review using `.github/instructions/dependabot-pr-instructions.md`.
